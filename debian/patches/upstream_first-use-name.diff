From: Valentin Rusu <kde@rusu.info>
Date: Mon, 07 Jul 2014 22:30:06 +0000
Subject: Fix first use case, when user specifies a name for a new wallet
X-Git-Url: http://quickgit.kde.org/?p=kwallet.git&a=commitdiff&h=25c7bb461d5821f332d43107a1cf2ba4c760bed3
---
Fix first use case, when user specifies a name for a new wallet

BUG: 337171

The legacy logic always created a default wallet, with the default
"kdewallet" name, the created the wallet the user requested.
This commit will fix it, by using the user specified name as the
default wallet name.
---


Index: kwallet-kf5-5.0.0/src/runtime/kwalletd/kwalletd.cpp
===================================================================
--- kwallet-kf5-5.0.0.orig/src/runtime/kwalletd/kwalletd.cpp
+++ kwallet-kf5-5.0.0/src/runtime/kwalletd/kwalletd.cpp
@@ -434,61 +434,69 @@ void KWalletD::checkActiveDialog()
 int KWalletD::doTransactionOpen(const QString &appid, const QString &wallet, bool isPath,
                                 qlonglong wId, bool modal, const QString &service)
 {
-    if (_firstUse && !wallets().contains(KWallet::Wallet::LocalWallet()) && !isPath) {
-        // First use wizard
-        // TODO GPG adjust new smartcard options gathered by the wizard
-        QPointer<KWalletWizard> wiz = new KWalletWizard(0);
-        wiz->setWindowTitle(i18n("KDE Wallet Service"));
-        setupDialog(wiz, (WId)wId, appid, modal);
-        int rc = wiz->exec();
-        if (rc == QDialog::Accepted && wiz) {
-            bool useWallet = wiz->field("useWallet").toBool();
+    if (_firstUse && !isPath) {
+        // if the user specifies a wallet name, the use it as the default wallet name
+        if (wallet != KWallet::Wallet::LocalWallet()) {
             KConfig kwalletrc("kwalletrc");
             KConfigGroup cfg(&kwalletrc, "Wallet");
+            cfg.writeEntry("Default Wallet", wallet);
+        }
+        if (wallets().contains(KWallet::Wallet::LocalWallet())) {
+            KConfig kwalletrc("kwalletrc");
+            KConfigGroup cfg(&kwalletrc, "Wallet");
+            _firstUse = false;
             cfg.writeEntry("First Use", false);
-            cfg.writeEntry("Enabled", useWallet);
-            cfg.writeEntry("Close When Idle", wiz->field("closeWhenIdle").toBool());
-            cfg.writeEntry("Use One Wallet", !wiz->field("networkWallet").toBool());
-            cfg.sync();
-            reconfigure();
+        } else {
+            // First use wizard
+            // TODO GPG adjust new smartcard options gathered by the wizard
+            QPointer<KWalletWizard> wiz = new KWalletWizard(0);
+            wiz->setWindowTitle(i18n("KDE Wallet Service"));
+            setupDialog(wiz, (WId)wId, appid, modal);
+            int rc = wiz->exec();
+            if (rc == QDialog::Accepted && wiz) {
+                bool useWallet = wiz->field("useWallet").toBool();
+                KConfig kwalletrc("kwalletrc");
+                KConfigGroup cfg(&kwalletrc, "Wallet");
+                cfg.writeEntry("First Use", false);
+                cfg.writeEntry("Enabled", useWallet);
+                cfg.writeEntry("Close When Idle", wiz->field("closeWhenIdle").toBool());
+                cfg.writeEntry("Use One Wallet", !wiz->field("networkWallet").toBool());
+                cfg.sync();
+                reconfigure();
 
-            if (!useWallet) {
-                delete wiz;
-                return -1;
-            }
+                if (!useWallet) {
+                    delete wiz;
+                    return -1;
+                }
 
-            // Create the wallet
-            // TODO GPG select the correct wallet type upon cretion (GPG or blowfish based)
-            KWallet::Backend *b = new KWallet::Backend(KWallet::Wallet::LocalWallet());
+                // Create the wallet
+                // TODO GPG select the correct wallet type upon cretion (GPG or blowfish based)
+                KWallet::Backend *b = new KWallet::Backend(KWallet::Wallet::LocalWallet());
 #ifdef HAVE_QGPGME
-            if (wiz->field("useBlowfish").toBool()) {
-                b->setCipherType(KWallet::BACKEND_CIPHER_BLOWFISH);
+                if (wiz->field("useBlowfish").toBool()) {
+                    b->setCipherType(KWallet::BACKEND_CIPHER_BLOWFISH);
 #endif
-                QString pass = wiz->field("pass1").toString();
-                QByteArray p(pass.toUtf8(), pass.length());
-                b->open(p);
-                p.fill(0);
+                    QString pass = wiz->field("pass1").toString();
+                    QByteArray p(pass.toUtf8(), pass.length());
+                    b->open(p);
+                    p.fill(0);
 #ifdef HAVE_QGPGME
+                } else {
+                    assert(wiz->field("useGpg").toBool());
+                    b->setCipherType(KWallet::BACKEND_CIPHER_GPG);
+                    b->open(wiz->gpgKey());
+                }
+#endif
+                b->createFolder(KWallet::Wallet::PasswordFolder());
+                b->createFolder(KWallet::Wallet::FormDataFolder());
+                b->close(true);
+                delete b;
+                delete wiz;
             } else {
-                assert(wiz->field("useGpg").toBool());
-                b->setCipherType(KWallet::BACKEND_CIPHER_GPG);
-                b->open(wiz->gpgKey());
+                delete wiz;
+                return -1;
             }
-#endif
-            b->createFolder(KWallet::Wallet::PasswordFolder());
-            b->createFolder(KWallet::Wallet::FormDataFolder());
-            b->close(true);
-            delete b;
-            delete wiz;
-        } else {
-            delete wiz;
-            return -1;
         }
-    } else if (_firstUse && !isPath) {
-        KConfig kwalletrc("kwalletrc");
-        KConfigGroup cfg(&kwalletrc, "Wallet");
-        _firstUse = false;
-        cfg.writeEntry("First Use", false);
     }
 
     int rc = internalOpen(appid, wallet, isPath, WId(wId), modal, service);
